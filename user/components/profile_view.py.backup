import flet as ft
import os
from typing import Optional
from .shared_ui import SharedUI
from .profile_image_service import ProfileImageService

class ProfileView:
    """Profile view component with profile image upload functionality"""
    
    def __init__(self, page: ft.Page, username: str, profile_service):
        self.page = page
        self.username = username
        self.profile_service = profile_service
        
        # Initialize profile image service
        self.image_service = ProfileImageService(profile_service.user_folder, username)
        
        # Load user data
        self.user_data = profile_service.load_profile()
        
        self.navigation = None
        self.shared = SharedUI(page, username, self.user_data)
        
        # File picker for profile image
        self.image_picker = ft.FilePicker(on_result=self.on_image_selected)
        page.overlay.append(self.image_picker)
        
        # Store reference to profile image container for updates
        self.profile_image_container = None
    
    def set_navigation(self, navigation):
        """Set navigation functions"""
        self.navigation = navigation
        self.shared.set_navigation(navigation)
    
    def on_image_selected(self, e: ft.FilePickerResultEvent):
        """Handle profile image selection"""
        if e.files:
            selected_file = e.files[0]
            
            # Validate file type
            valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp']
            file_ext = os.path.splitext(selected_file.name)[1].lower()
            
            if file_ext not in valid_extensions:
                self.show_error_message(f"Invalid file type. Please select an image file ({', '.join(valid_extensions)})")
                return
            
            # Check file size (limit to 10MB)
            try:
                file_size = os.path.getsize(selected_file.path)
                if file_size > 10 * 1024 * 1024:  # 10MB limit
                    self.show_error_message("Image file is too large. Please select an image smaller than 10MB.")
                    return
            except:
                pass  # If we can't get size, proceed anyway
            
            # Show upload confirmation dialog
            self.show_upload_confirmation(selected_file)
    
    def show_upload_confirmation(self, selected_file):
        """Show confirmation dialog for profile image upload"""
        
        def upload_image(e):
            """Upload the selected image"""
            try:
                success = self.image_service.upload_profile_image(selected_file.path)
                
                if success:
                    self.show_success_message("Profile image updated successfully!")
                    
                    # Update the profile image display
                    self.update_profile_image_display()
                    
                    # Update shared UI components that show avatar
                    self.shared.user_data = self.profile_service.load_profile()
                    
                else:
                    self.show_error_message("Failed to upload profile image. Please try again.")
                
                # Close dialog
                dialog.open = False
                self.page.update()
                
            except Exception as ex:
                self.show_error_message(f"Error uploading image: {str(ex)}")
                dialog.open = False
                self.page.update()
        
        def cancel_upload(e):
            """Cancel the upload"""
            dialog.open = False
            self.page.update()
        
        # Get file info for display
        file_size = "Unknown"
        try:
            size_bytes = os.path.getsize(selected_file.path)
            if size_bytes < 1024**2:
                file_size = f"{size_bytes/1024:.1f} KB"
            else:
                file_size = f"{size_bytes/(1024**2):.1f} MB"
        except:
            pass
        
        dialog = ft.AlertDialog(
            modal=True,
            title=ft.Row([
                ft.Icon(ft.Icons.PHOTO_CAMERA, color=ft.Colors.BLUE_600, size=24),
                ft.Container(width=10),
                ft.Text("Upload Profile Image", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_600)
            ]),
            content=ft.Container(
                width=400,
                content=ft.Column([
                    ft.Text(f"Upload this image as your profile picture?", size=14),
                    ft.Container(height=10),
                    ft.Text(f"ðŸ“„ File: {selected_file.name}", size=12, color=ft.Colors.GREY_600),
                    ft.Text(f"ðŸ“Š Size: {file_size}", size=12, color=ft.Colors.GREY_600),
                    ft.Container(height=10),
                    ft.Text("â€¢ Image will be resized to 300x300 pixels", size=11, color=ft.Colors.GREY_500),
                    ft.Text("â€¢ Rectangular images will be cropped to square", size=11, color=ft.Colors.GREY_500),
                    ft.Text("â€¢ Previous profile image will be replaced", size=11, color=ft.Colors.GREY_500),
                ], spacing=5)
            ),
            actions=[
                ft.Row([
                    ft.Container(expand=True),
                    ft.TextButton(
                        "Cancel",
                        on_click=cancel_upload,
                        style=ft.ButtonStyle(color=ft.Colors.GREY_700)
                    ),
                    ft.Container(width=10),
                    ft.ElevatedButton(
                        "Upload Image",
                        icon=ft.Icons.UPLOAD,
                        bgcolor=ft.Colors.BLUE_600,
                        color=ft.Colors.WHITE,
                        on_click=upload_image,
                        style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=5))
                    )
                ], alignment=ft.MainAxisAlignment.END)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def show_remove_image_confirmation(self):
        """Show confirmation dialog for removing profile image"""
        
        def remove_image(e):
            """Remove the profile image"""
            try:
                success = self.image_service.delete_profile_image()
                
                if success:
                    self.show_success_message("Profile image removed successfully!")
                    
                    # Update the profile image display
                    self.update_profile_image_display()
                    
                    # Update shared UI components
                    self.shared.user_data = self.profile_service.load_profile()
                    
                else:
                    self.show_error_message("Failed to remove profile image.")
                
                # Close dialog
                dialog.open = False
                self.page.update()
                
            except Exception as ex:
                self.show_error_message(f"Error removing image: {str(ex)}")
                dialog.open = False
                self.page.update()
        
        def cancel_remove(e):
            """Cancel the removal"""
            dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            modal=True,
            title=ft.Row([
                ft.Icon(ft.Icons.DELETE_OUTLINE, color=ft.Colors.ORANGE_600, size=24),
                ft.Container(width=10),
                ft.Text("Remove Profile Image", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE_600)
            ]),
            content=ft.Container(
                width=350,
                content=ft.Text(
                    "Are you sure you want to remove your profile image?\n\nYour profile will display the default avatar instead.",
                    size=14
                )
            ),
            actions=[
                ft.Row([
                    ft.Container(expand=True),
                    ft.TextButton(
                        "Cancel",
                        on_click=cancel_remove,
                        style=ft.ButtonStyle(color=ft.Colors.GREY_700)
                    ),
                    ft.Container(width=10),
                    ft.ElevatedButton(
                        "Remove Image",
                        icon=ft.Icons.DELETE_OUTLINE,
                        bgcolor=ft.Colors.ORANGE_600,
                        color=ft.Colors.WHITE,
                        on_click=remove_image,
                        style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=5))
                    )
                ], alignment=ft.MainAxisAlignment.END)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def update_profile_image_display(self):
        """Update the profile image display"""
        if self.profile_image_container:
            # Clear existing content
            self.profile_image_container.content = self.create_profile_image_section()
            self.page.update()
    
    def create_profile_image_section(self):
        """Create the profile image section with upload functionality"""
        has_image = self.image_service.has_profile_image()
        image_info = self.image_service.get_image_info()
        
        if has_image:
            # Show uploaded profile image
            profile_display = ft.Column([
                # Profile image with border
                ft.Container(
                    content=ft.Image(
                        src=self.image_service.get_profile_image_path(),
                        width=120,
                        height=120,
                        fit=ft.ImageFit.COVER,
                        border_radius=60  # Circular image
                    ),
                    border=ft.border.all(3, ft.Colors.BLUE_500),
                    border_radius=63,
                    padding=0
                ),
                
                ft.Container(height=15),
                
                # Image info
                ft.Text(f"Size: {image_info.get('size', 'Unknown')}", size=11, color=ft.Colors.GREY_600),
                ft.Text(f"Dimensions: {image_info.get('dimensions', 'Unknown')}", size=11, color=ft.Colors.GREY_600),
                
                ft.Container(height=10),
                
                # Action buttons
                ft.Row([
                    ft.ElevatedButton(
                        "Change",
                        icon=ft.Icons.PHOTO_CAMERA,
                        on_click=lambda e: self.image_picker.pick_files(
                            allowed_extensions=['jpg', 'jpeg', 'png', 'bmp', 'gif', 'webp']
                        ),
                        bgcolor=ft.Colors.BLUE_600,
                        color=ft.Colors.WHITE,
                        height=35,
                        style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=6))
                    ),
                    ft.Container(width=10),
                    ft.ElevatedButton(
                        "Remove",
                        icon=ft.Icons.DELETE_OUTLINE,
                        on_click=lambda e: self.show_remove_image_confirmation(),
                        bgcolor=ft.Colors.ORANGE_50,
                        color=ft.Colors.ORANGE_700,
                        height=35,
                        style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=6))
                    )
                ], alignment=ft.MainAxisAlignment.CENTER, spacing=0)
                
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=5)
        
        else:
            # Show default avatar with upload option
            profile_display = ft.Column([
                # Default avatar
                ft.Container(
                    content=ft.Icon(
                        ft.Icons.PERSON,
                        size=60,
                        color=ft.Colors.WHITE
                    ),
                    width=120,
                    height=120,
                    bgcolor=ft.Colors.BLUE_500,
                    border_radius=60,
                    alignment=ft.alignment.center,
                    border=ft.border.all(3, ft.Colors.BLUE_300)
                ),
                
                ft.Container(height=15),
                
                ft.Text("No profile image", size=11, color=ft.Colors.GREY_600),
                
                ft.Container(height=15),
                
                # Upload button
                ft.ElevatedButton(
                    "Upload Photo",
                    icon=ft.Icons.PHOTO_CAMERA,
                    on_click=lambda e: self.image_picker.pick_files(
                        allowed_extensions=['jpg', 'jpeg', 'png', 'bmp', 'gif', 'webp']
                    ),
                    bgcolor=ft.Colors.BLUE_600,
                    color=ft.Colors.WHITE,
                    height=35,
                    style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=6))
                )
                
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=5)
        
        return profile_display
    
    def create_profile_info_section(self):
        """Create the profile information section"""
        return ft.Column([
            # User name
            ft.Text(
                self.user_data.get('fullname', 'User'),
                size=24,
                weight=ft.FontWeight.BOLD,
                color=ft.Colors.BLACK87,
                text_align=ft.TextAlign.CENTER
            ),
            
            # Username
            ft.Text(
                self.username,
                size=16,
                color=ft.Colors.GREY_600,
                text_align=ft.TextAlign.CENTER
            ),
            
            # Email
            ft.Text(
                self.user_data.get('email', f'{self.username}@example.com'),
                size=14,
                color=ft.Colors.GREY_600,
                text_align=ft.TextAlign.CENTER
            ),
            
            ft.Container(height=20),
            
            # Additional profile info if available
            ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text("Role:", weight=ft.FontWeight.BOLD, size=12, color=ft.Colors.GREY_700),
                        ft.Text(self.user_data.get('role', 'User'), size=12, color=ft.Colors.GREY_600)
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN) if self.user_data.get('role') else ft.Container(),
                    
                    ft.Row([
                        ft.Text("Team:", weight=ft.FontWeight.BOLD, size=12, color=ft.Colors.GREY_700),
                        ft.Text(
                            ', '.join(self.user_data.get('team_tags', [])) if self.user_data.get('team_tags') else 'None',
                            size=12, color=ft.Colors.GREY_600
                        )
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN) if self.user_data.get('team_tags') else ft.Container(),
                    
                ], spacing=8),
                padding=ft.padding.all(15),
                bgcolor=ft.Colors.GREY_50,
                border_radius=8,
                margin=ft.margin.only(top=10)
            ) if self.user_data.get('role') or self.user_data.get('team_tags') else ft.Container()
            
        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=5)
    
    def show_success_message(self, message: str):
        """Show success message"""
        self.page.snack_bar = ft.SnackBar(
            content=ft.Row([
                ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.WHITE, size=20),
                ft.Container(width=10),
                ft.Text(message, color=ft.Colors.WHITE)
            ]),
            bgcolor=ft.Colors.GREEN_600
        )
        self.page.snack_bar.open = True
        self.page.update()
    
    def show_error_message(self, message: str):
        """Show error message"""
        self.page.snack_bar = ft.SnackBar(
            content=ft.Row([
                ft.Icon(ft.Icons.ERROR, color=ft.Colors.WHITE, size=20),
                ft.Container(width=10),
                ft.Text(message, color=ft.Colors.WHITE)
            ]),
            bgcolor=ft.Colors.RED_600
        )
        self.page.snack_bar.open = True
        self.page.update()
    
    def create_content(self):
        """Create the main profile content"""
        # Create profile image section and store reference
        profile_image_section = self.create_profile_image_section()
        self.profile_image_container = ft.Container(content=profile_image_section)
        
        return ft.Container(
            content=ft.Column([
                # Back button
                self.shared.create_back_button(
                    lambda e: self.navigation['show_browser']() if self.navigation else None
                ),
                
                # Main profile card
                ft.Container(
                    content=ft.Row([
                        # Left side - Navigation menu
                        ft.Container(
                            content=self.shared.create_user_sidebar("profile"),
                            alignment=ft.alignment.top_center,
                            width=200
                        ),
                        ft.Container(width=20),
                        
                        # Right side - Profile content
                        ft.Container(
                            content=ft.Column([
                                ft.Text("Profile", size=24, weight=ft.FontWeight.BOLD),
                                ft.Divider(),
                                
                                ft.Container(height=20),
                                
                                # Profile image section
                                self.profile_image_container,
                                
                                ft.Container(height=30),
                                
                                # Profile information
                                self.create_profile_info_section(),
                                
                            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                            expand=True,
                            padding=ft.padding.all(30)
                        )
                    ], alignment=ft.MainAxisAlignment.START, 
                       vertical_alignment=ft.CrossAxisAlignment.START),
                    margin=ft.margin.only(left=15, right=15, top=5, bottom=10),
                    bgcolor=ft.Colors.WHITE,
                    border_radius=12,
                    border=ft.border.all(1, ft.Colors.GREY_200),
                    expand=True
                )
            ], spacing=0, alignment=ft.MainAxisAlignment.START),
            alignment=ft.alignment.top_center,
            expand=True
        )